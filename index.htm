<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8" />
    <title>Cubo 3D Giratório</title>
    <style>
        body { margin: 0; background: #111; overflow: hidden; }
        canvas { display: block; }
    </style>
    <!-- Removido o script de alteração dinâmica, pois o cubo já será criado maior e azul diretamente no script principal. -->
</head>
<body>
    <!-- Carrega a biblioteca Three.js -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.154.0/build/three.min.js"></script>

    <script>
        // Cena
        const scene = new THREE.Scene();

        // Câmera
        const camera = new THREE.PerspectiveCamera(
            75, window.innerWidth / window.innerHeight, 0.1, 1000
        );
        camera.position.z = 5;

        // Renderizador
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Cubo
        const geometry = new THREE.BoxGeometry();
        const material = new THREE.MeshStandardMaterial({ color: 0xff0055 });
        const cube = new THREE.Mesh(geometry, material);
        scene.add(cube);

        // Luz
        const light = new THREE.PointLight(0xffffff, 1, 100);
        light.position.set(10, 10, 10);
        scene.add(light);

        // Variáveis para arrastar
        let isDragging = false;
        let previousMousePosition = { x: 0, y: 0 };

        renderer.domElement.addEventListener('mousedown', function(e) {
            isDragging = true;
            previousMousePosition = {
                x: e.clientX,
                y: e.clientY
            };
        });

        renderer.domElement.addEventListener('mousemove', function(e) {
            if (isDragging) {
                const deltaMove = {
                    x: e.clientX - previousMousePosition.x,
                    y: e.clientY - previousMousePosition.y
                };

                // Rotaciona o cubo conforme o movimento do mouse
                cube.rotation.y += deltaMove.x * 0.01;
                cube.rotation.x += deltaMove.y * 0.01;

                previousMousePosition = {
                    x: e.clientX,
                    y: e.clientY
                };
            }
        });

        renderer.domElement.addEventListener('mouseup', function() {
            isDragging = false;
        });

        renderer.domElement.addEventListener('mouseleave', function() {
            isDragging = false;
        });

        // Ajusta tamanho quando redimensiona a janela
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Loop de animação
        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }
        animate();
    </script>
</body>
</html>

<!-- Fim do código -->
<!-- Este exemplo cria um cubo 3D giratório com controles de órbita. -->